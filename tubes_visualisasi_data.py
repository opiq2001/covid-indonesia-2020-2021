# -*- coding: utf-8 -*-
"""TUBES Visualisasi Data Kelompok 4 IF-42-GAB05

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17LvwKxtlhFyO5pWz8XN7zAfL7MHOM3TE

# Kelompok **4**

1. Muhammad Azmi Faizudin Permana (1301190444)
2. Rifqiandi Cesario Putra (1301190350)
3. Yusril Ramadhan (1301194075)
4. Taufiqurrahman (1301190429)
"""

import pandas as pd # Import Library Pandas
from bokeh.models.sources import ColumnDataSource # import struktur fundamental bokeh
from bokeh.models import Select, Panel  # import fitur interaktif select dan panel
from bokeh.layouts import column, row  # import column dan row untuk layouting tampilan halaman website
from bokeh.plotting import figure # import figure untuk membuat plot
from bokeh.models.tickers import FixedTicker

def Tab_LinePlot(data_idn):
    # Inisialisasi variabel List_Prov untuk pilihan provinsi yang ingin dipilih
    List_Prov = ["JAWA BARAT", "DKI JAKARTA", "JAWA TENGAH", "JAWA TIMUR", "BANTEN", "DAERAH ISTIMEWA YOGYAKARTA", "BALI", "NUSA TENGGARA TIMUR", "NUSA TENGGARA BARAT", "GORONTALO", "SULAWESI BARAT", "SULAWESI TENGAH", "SULAWESI UTARA", "SULAWESI TENGGARA", "SULAWESI SELATAN", "KALIMANTAN BARAT", "KALIMANTAN TIMUR", "KALIMANTAN SELATAN", "KALIMANTAN TENGAH", "KALIMANTAN UTARA" ,"MALUKU UTARA", "MALUKU", "PAPUA BARAT", "PAPUA", "ACEH", "SUMATERA UTARA", "SUMATERA SELATAN", "SUMATERA BARAT", "BENGKULU", "RIAU", "KEPULAUAN RIAU", "JAMBI", "LAMPUNG", "KEPULAUAN BANGKA BELITUNG"]

    # Inisialisasi function get_data untuk mengambil data sesuai provinsi
    def get_data(p): 
        df = data_idn.loc[:, ['Date', 'Province', 'Daily_Case']]
        df = df.loc[df['Province'].isin([p])]
        return df.dropna()

    # Inisialisasi function provinsi untuk menampilkan pilihan provinsi
    def provinsi(val, lst): 
        return [x for x in lst if x!= val]

    prov1 = Select(value="JAWA TENGAH", options = provinsi("DKI JAKARTA", List_Prov)) # prov1 menyimpan pilihan provinsi berdasarkan List_Prov
    prov2 = Select(value="DKI JAKARTA", options = provinsi("JAWA BARAT", List_Prov)) # prov2 menyimpan pilihan provinsi berdasarkan List_Prov

    # Ambil dan simpan data ke variabel
    data1 = get_data(prov1.value )
    data2 = get_data(prov2.value )
    source1 =  ColumnDataSource(data=data1)
    source2 =  ColumnDataSource(data=data2)

    # tools yang akan digunakan pada plots
    tools = "pan, wheel_zoom, xbox_select, reset"
    
    # Membuat grafik kasus harian provinsi pilihan pertama
    graf1 = figure(width = 700, height = 250, tools=tools, x_axis_type="datetime", active_drag="xbox_select")
    graf1.line("Date", "Daily_Case", source=source1)
    graf1.circle("Date", "Daily_Case", size=1, source=source1, color=None, selection_color="firebrick")

    # Membuat grafik kasus harian provinsi pilihan kedua
    graf2 = figure(width = 700, height = 250, tools=tools, x_axis_type="datetime", active_drag="xbox_select")
    graf2.x_range = graf1.x_range
    graf2.line("Date", "Daily_Case", source=source2, color="red")
    graf2.circle("Date", "Daily_Case", size=1, source=source2, color=None, selection_color="firebrick")

    # Callbacks
    # Inisialisasi function prov1_change untuk melakukan update grafik sesuai provinsi yang dipilih
    def prov1_change(attrname, old, new):
        prov2.options = provinsi(new, List_Prov)
        update()

    # Inisialisasi function prov2_change untuk melakukan update grafik sesuai provinsi yang dipilih
    def prov2_change(attrname, old, new):
        prov1.options = provinsi(new, List_Prov)
        update()

    # Inisialisasi function update untuk melakukan update grafik 
    def update():
        p1, p2 = prov1.value, prov2.value
        df1 = get_data(p1)
        df2 = get_data(p2)
        source1.data = df1
        source2.data = df2
        graf1.title.text = "Grafik Kasus Harian " + p1
        graf2.title.text = "Grafik Kasus Harian " + p2

    # Melakukan update provinsi yang dipilih  
    prov1.on_change("value", prov1_change)
    prov2.on_change("value", prov2_change) 

    # Setting tampilan pada halaman website
    widgets = column(prov1, prov2)
    series = column(graf1, graf2)
    main_row = row(widgets, series)

    # Membuat tab
    tab = Panel(child=main_row, title = "Line Plot Kasus Harian")
    return tab

def Tab_Bar(data_idn):
    # Inisialisasi variabel tanggal untuk pilihan tanggal yang akan digunakan
    List_Tgl = pd.date_range(start="2020-03-01",end="2021-08-18")
    List_Tgl = List_Tgl.strftime('%Y-%m-%d')


    # Inisialisasi function get_data untuk mengambil data sesuai tanggal
    def get_data(tgl):
        df = data_idn.loc[:, ['Date', 'Province', 'Daily_Case']]
        df = df.loc[df["Date"] == tgl]
        return df.dropna()

    # Inisialisasi function tanggal yang mengembalikan list tanggal 
    def tanggal(val, lst): 
        return [x for x in lst]
    
    tgl_selected = Select(value="2020-07-01", options = tanggal("2020-07-01", List_Tgl)) # prov1 menyimpan selection tgl berdasarkan List_Tgl

    # Ambil dan simpan data ke variabel
    data = get_data(tgl_selected.value)
    source =  ColumnDataSource(data=data)

    # Set tools yang akan digunakna pada Plots
    corr_tools = "pan, wheel_zoom, box_select, reset"

    # Membuat bar diagram 
    bar = figure(width=5000, height=610, tools=corr_tools, x_range=data["Province"], toolbar_location="below")
    bar.vbar(x="Province",top="Daily_Case", source=source,color='green')

    # Callbacks
    # Inisialisasi function tgl_change untuk melakukan update grafik sesuai tgl yang dipilih
    def tgl_change(attrname, old, new):
        tgl_selected.options = tanggal(new, List_Tgl)
        update()

    # Inisialisasi function update melakukan update grafik
    def update():
        tgl = tgl_selected.value
        df = get_data(tgl)
        source.data = df
        data = df
        bar.title.text = "Jumlah kasus harian %s" % (tgl)

    # Melakukan update tgl yang dipilih 
    tgl_selected.on_change("value", tgl_change)

    # Set layout tampilan pada halaman website
    widgets = column(tgl_selected)
    main_row = row(widgets, bar)

    # Membuat tab dengan layout
    tab = Panel(child=main_row, title = "Bar Diagram Kasus Harian")
    return tab

# Our main plotting package (must have explicit import of submodules)
import bokeh.io
import bokeh.plotting

# Enable viewing Bokeh plots in the notebook
bokeh.io.output_notebook()

from bokeh.models.widgets import Tabs # import Tabs digunakna untuk membuat tab halaman website
from bokeh.io import curdoc # import curdoc 
from bokeh.plotting import figure, output_file, show

data_idn = pd.read_csv(
    join(dirname(__file__), "data", "Indonesia_coronavirus_daily_data.csv"), index_col=0
)
#data_idn = pd.read_csv("https://raw.githubusercontent.com/opiq2001/anydata/main/Indonesia_coronavirus_daily_data.csv")
data_idn['Date'] = pd.to_datetime(data_idn['Date'], format='%Y-%m-%d')

# Membuat Tab 
tab1 = Tab_Bar(data_idn)
tab2 = Tab_LinePlot(data_idn)

# Masukkan semua tab ke dalam satu aplikasi
tabs = Tabs(tabs = [tab1, tab2])

# Put the tabs in the current document for display
curdoc().add_root(tabs)
curdoc().title = "Data Covid Tiap Provinsi di Indonesia "
